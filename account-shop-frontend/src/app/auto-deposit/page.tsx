'use client';

import { useState, useEffect } from 'react';
import { useAuth } from '@/contexts/AuthContext';
import { useRouter } from 'next/navigation';
import Layout from '@/components/Layout';
import { Card, CardContent, CardHeader } from '@/components/ui/Card';
import Button from '@/components/ui/Button';
import Input from '@/components/ui/Input';
import { AutoDeposit } from '@/types';
import { autoDepositsAPI } from '@/lib/api';
import { formatCurrency, formatDate } from '@/lib/utils';
import { 
  QrCodeIcon, 
  ClockIcon, 
  CheckCircleIcon,
  XCircleIcon,
  CreditCardIcon,
  DocumentDuplicateIcon
} from '@heroicons/react/24/outline';
import toast from 'react-hot-toast';

export default function AutoDepositPage() {
  const { user, refreshUser } = useAuth();
  const router = useRouter();
  const [deposits, setDeposits] = useState<AutoDeposit[]>([]);
  const [loading, setLoading] = useState(true);
  const [showCreateForm, setShowCreateForm] = useState(false);
  const [depositAmount, setDepositAmount] = useState('');
  const [createLoading, setCreateLoading] = useState(false);
  const [activeDeposit, setActiveDeposit] = useState<AutoDeposit | null>(null);

  useEffect(() => {
    if (!user) {
      router.push('/login');
      return;
    }
    fetchDeposits();
  }, [user, router]);

  const fetchDeposits = async () => {
    try {
      const response = await autoDepositsAPI.getMyDeposits();
      setDeposits(response.data.data || response.data);
    } catch (error) {
      console.error('Error fetching deposits:', error);
      toast.error('Kh√¥ng th·ªÉ t·∫£i danh s√°ch n·∫°p ti·ªÅn');
    } finally {
      setLoading(false);
    }
  };

  const handleCreateDeposit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    const amount = parseFloat(depositAmount);
    if (isNaN(amount) || amount < 10000) {
      toast.error('S·ªë ti·ªÅn n·∫°p t·ªëi thi·ªÉu l√† 10,000 VNƒê');
      return;
    }

    if (amount > 50000000) {
      toast.error('S·ªë ti·ªÅn n·∫°p t·ªëi ƒëa l√† 50,000,000 VNƒê');
      return;
    }

    setCreateLoading(true);

    try {
      const response = await autoDepositsAPI.create({ amount });
      const newDeposit = response.data.data;
      
      setActiveDeposit(newDeposit);
      setDeposits(prev => [newDeposit, ...prev]);
      setDepositAmount('');
      setShowCreateForm(false);
      
      toast.success('T·∫°o l·ªánh n·∫°p ti·ªÅn th√†nh c√¥ng! Vui l√≤ng qu√©t m√£ QR ƒë·ªÉ thanh to√°n.');
    } catch (error: any) {
      const message = error.response?.data?.message || 'C√≥ l·ªói x·∫£y ra khi t·∫°o l·ªánh n·∫°p ti·ªÅn';
      toast.error(message);
    } finally {
      setCreateLoading(false);
    }
  };

  const handleCheckStatus = async (depositId: number) => {
    try {
      const response = await autoDepositsAPI.checkStatus(depositId);
      const updatedDeposit = response.data.data;
      
      setDeposits(prev => prev.map(d => 
        d.id === depositId ? updatedDeposit : d
      ));

      if (updatedDeposit.status === 'completed') {
        toast.success('N·∫°p ti·ªÅn th√†nh c√¥ng!');
        await refreshUser();
        setActiveDeposit(null);
      } else if (updatedDeposit.status === 'expired') {
        toast.error('L·ªánh n·∫°p ti·ªÅn ƒë√£ h·∫øt h·∫°n');
        setActiveDeposit(null);
      }
    } catch (error) {
      console.error('Error checking status:', error);
    }
  };

  const copyToClipboard = (text: string) => {
    navigator.clipboard.writeText(text);
    toast.success('ƒê√£ copy v√†o clipboard!');
  };

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'completed':
        return <CheckCircleIcon className="w-5 h-5 text-green-600" />;
      case 'pending':
        return <ClockIcon className="w-5 h-5 text-yellow-600" />;
      case 'expired':
      case 'failed':
        return <XCircleIcon className="w-5 h-5 text-red-600" />;
      default:
        return <ClockIcon className="w-5 h-5 text-gray-600" />;
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'completed':
        return 'bg-green-100 text-green-800';
      case 'pending':
        return 'bg-yellow-100 text-yellow-800';
      case 'expired':
      case 'failed':
        return 'bg-red-100 text-red-800';
      default:
        return 'bg-gray-100 text-gray-800';
    }
  };

  const getStatusText = (status: string) => {
    switch (status) {
      case 'completed':
        return 'Ho√†n th√†nh';
      case 'pending':
        return 'Ch·ªù thanh to√°n';
      case 'expired':
        return 'H·∫øt h·∫°n';
      case 'failed':
        return 'Th·∫•t b·∫°i';
      default:
        return status;
    }
  };

  if (!user) return null;

  if (loading) {
    return (
      <Layout>
        <div className="flex items-center justify-center min-h-[400px]">
          <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-blue-600"></div>
        </div>
      </Layout>
    );
  }

  return (
    <Layout>
      <div className="space-y-8">
        {/* Header */}
        <div className="bg-gradient-to-r from-blue-600 to-cyan-600 rounded-2xl p-8 text-white">
          <h1 className="text-3xl font-bold mb-2">‚ö° N·∫°p ti·ªÅn t·ª± ƒë·ªông</h1>
          <p className="text-blue-100 text-lg">
            N·∫°p ti·ªÅn nhanh ch√≥ng v·ªõi VietQR - T·ª± ƒë·ªông c·ªông ti·ªÅn sau khi chuy·ªÉn kho·∫£n
          </p>
        </div>

        {/* Create Deposit */}
        <Card>
          <CardHeader>
            <div className="flex items-center justify-between">
              <h3 className="text-lg font-semibold">üí∞ T·∫°o l·ªánh n·∫°p ti·ªÅn m·ªõi</h3>
              <Button
                onClick={() => setShowCreateForm(!showCreateForm)}
                variant={showCreateForm ? 'secondary' : 'primary'}
              >
                {showCreateForm ? 'H·ªßy' : 'N·∫°p ti·ªÅn ngay'}
              </Button>
            </div>
          </CardHeader>
          
          {showCreateForm && (
            <CardContent>
              <form onSubmit={handleCreateDeposit} className="space-y-4">
                <Input
                  label="S·ªë ti·ªÅn (VNƒê)"
                  type="number"
                  value={depositAmount}
                  onChange={(e) => setDepositAmount(e.target.value)}
                  placeholder="Nh·∫≠p s·ªë ti·ªÅn mu·ªën n·∫°p"
                  min="10000"
                  max="50000000"
                  step="1000"
                  required
                />
                
                <div className="bg-blue-50 p-4 rounded-lg">
                  <h4 className="font-medium text-blue-900 mb-2">‚ú® ∆Øu ƒëi·ªÉm n·∫°p ti·ªÅn t·ª± ƒë·ªông:</h4>
                  <ul className="text-sm text-blue-800 space-y-1">
                    <li>‚Ä¢ ‚ö° T·ª± ƒë·ªông c·ªông ti·ªÅn sau khi chuy·ªÉn kho·∫£n (1-2 ph√∫t)</li>
                    <li>‚Ä¢ üì± Qu√©t m√£ QR ho·∫∑c chuy·ªÉn kho·∫£n th·ªß c√¥ng</li>
                    <li>‚Ä¢ üîí An to√†n v·ªõi m√£ tham chi·∫øu duy nh·∫•t</li>
                    <li>‚Ä¢ ‚è∞ L·ªánh c√≥ hi·ªáu l·ª±c trong 15 ph√∫t</li>
                    <li>‚Ä¢ üí∞ S·ªë ti·ªÅn: 10,000 - 50,000,000 VNƒê</li>
                  </ul>
                </div>

                <Button
                  type="submit"
                  loading={createLoading}
                  disabled={!depositAmount}
                  className="w-full"
                >
                  T·∫°o m√£ QR n·∫°p ti·ªÅn
                </Button>
              </form>
            </CardContent>
          )}
        </Card>

        {/* Active Deposit QR */}
        {activeDeposit && activeDeposit.status === 'pending' && (
          <Card className="border-blue-200 bg-blue-50">
            <CardHeader>
              <div className="flex items-center justify-between">
                <h3 className="text-lg font-semibold text-blue-900">
                  üî• L·ªánh n·∫°p ti·ªÅn ƒëang ch·ªù thanh to√°n
                </h3>
                <Button
                  onClick={() => handleCheckStatus(activeDeposit.id)}
                  variant="outline"
                  size="sm"
                >
                  Ki·ªÉm tra tr·∫°ng th√°i
                </Button>
              </div>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                {/* QR Code */}
                <div className="text-center">
                  <div className="bg-white p-4 rounded-lg shadow-sm">
                    {activeDeposit.qr_code_url ? (
                      <img
                        src={activeDeposit.qr_code_url}
                        alt="VietQR Code"
                        className="w-64 h-64 mx-auto"
                      />
                    ) : (
                      <div className="w-64 h-64 mx-auto bg-gray-200 rounded-lg flex items-center justify-center">
                        <QrCodeIcon className="w-16 h-16 text-gray-400" />
                      </div>
                    )}
                  </div>
                  <p className="text-sm text-blue-700 mt-2">
                    Qu√©t m√£ QR b·∫±ng app ng√¢n h√†ng
                  </p>
                </div>

                {/* Transfer Info */}
                <div className="space-y-4">
                  <div className="bg-white p-4 rounded-lg">
                    <h4 className="font-semibold text-gray-900 mb-3">Th√¥ng tin chuy·ªÉn kho·∫£n:</h4>

                    <div className="space-y-3">
                      <div className="flex justify-between items-center">
                        <span className="text-gray-600">S·ªë t√†i kho·∫£n:</span>
                        <div className="flex items-center space-x-2">
                          <span className="font-mono font-bold">{activeDeposit.bank_account}</span>
                          <Button
                            onClick={() => copyToClipboard(activeDeposit.bank_account)}
                            variant="ghost"
                            size="sm"
                          >
                            <DocumentDuplicateIcon className="w-4 h-4" />
                          </Button>
                        </div>
                      </div>

                      <div className="flex justify-between items-center">
                        <span className="text-gray-600">S·ªë ti·ªÅn:</span>
                        <div className="flex items-center space-x-2">
                          <span className="font-bold text-green-600">
                            {formatCurrency(activeDeposit.amount)}
                          </span>
                          <Button
                            onClick={() => copyToClipboard(activeDeposit.amount.toString())}
                            variant="ghost"
                            size="sm"
                          >
                            <DocumentDuplicateIcon className="w-4 h-4" />
                          </Button>
                        </div>
                      </div>

                      <div className="flex justify-between items-center">
                        <span className="text-gray-600">N·ªôi dung CK:</span>
                        <div className="flex items-center space-x-2">
                          <span className="font-mono font-bold text-blue-600">
                            {activeDeposit.reference_code}
                          </span>
                          <Button
                            onClick={() => copyToClipboard(activeDeposit.reference_code)}
                            variant="ghost"
                            size="sm"
                          >
                            <DocumentDuplicateIcon className="w-4 h-4" />
                          </Button>
                        </div>
                      </div>

                      <div className="flex justify-between items-center">
                        <span className="text-gray-600">H·∫øt h·∫°n:</span>
                        <span className="font-medium text-red-600">
                          {formatDate(activeDeposit.expires_at)}
                        </span>
                      </div>
                    </div>
                  </div>

                  <div className="bg-yellow-50 border border-yellow-200 p-4 rounded-lg">
                    <h4 className="font-medium text-yellow-800 mb-2">‚ö†Ô∏è L∆∞u √Ω quan tr·ªçng:</h4>
                    <ul className="text-sm text-yellow-700 space-y-1">
                      <li>‚Ä¢ Chuy·ªÉn kho·∫£n ƒê√öNG s·ªë ti·ªÅn v√† n·ªôi dung</li>
                      <li>‚Ä¢ Ti·ªÅn s·∫Ω t·ª± ƒë·ªông c·ªông sau 1-2 ph√∫t</li>
                      <li>‚Ä¢ L·ªánh h·∫øt h·∫°n sau 15 ph√∫t</li>
                      <li>‚Ä¢ Kh√¥ng chuy·ªÉn kho·∫£n sau khi h·∫øt h·∫°n</li>
                    </ul>
                  </div>

                  <Button
                    onClick={() => setActiveDeposit(null)}
                    variant="outline"
                    className="w-full"
                  >
                    ƒê√≥ng
                  </Button>
                </div>
              </div>
            </CardContent>
          </Card>
        )}

        {/* Deposits History */}
        <Card>
          <CardHeader>
            <h3 className="text-lg font-semibold">üìã L·ªãch s·ª≠ n·∫°p ti·ªÅn t·ª± ƒë·ªông</h3>
          </CardHeader>
          <CardContent>
            {deposits.length === 0 ? (
              <div className="text-center py-8">
                <div className="text-gray-400 mb-4">
                  <CreditCardIcon className="w-16 h-16 mx-auto" />
                </div>
                <h3 className="text-lg font-medium text-gray-900 mb-2">
                  Ch∆∞a c√≥ l·ªánh n·∫°p ti·ªÅn n√†o
                </h3>
                <p className="text-gray-600">
                  T·∫°o l·ªánh n·∫°p ti·ªÅn ƒë·∫ßu ti√™n c·ªßa b·∫°n
                </p>
              </div>
            ) : (
              <div className="space-y-4">
                {deposits.map((deposit) => (
                  <div
                    key={deposit.id}
                    className="flex items-center justify-between p-4 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors"
                  >
                    <div className="flex items-center space-x-4">
                      {getStatusIcon(deposit.status)}
                      <div>
                        <h4 className="font-medium text-gray-900">
                          N·∫°p ti·ªÅn {formatCurrency(deposit.amount)}
                        </h4>
                        <p className="text-sm text-gray-600">
                          M√£: {deposit.reference_code}
                        </p>
                        <p className="text-xs text-gray-500">
                          {formatDate(deposit.created_at)}
                        </p>
                      </div>
                    </div>

                    <div className="flex items-center space-x-4">
                      <div className="text-right">
                        <span className={`px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(deposit.status)}`}>
                          {getStatusText(deposit.status)}
                        </span>
                        {deposit.status === 'pending' && (
                          <p className="text-xs text-red-500 mt-1">
                            H·∫øt h·∫°n: {formatDate(deposit.expires_at)}
                          </p>
                        )}
                      </div>

                      <div className="flex space-x-2">
                        {deposit.status === 'pending' && (
                          <>
                            <Button
                              onClick={() => setActiveDeposit(deposit)}
                              variant="outline"
                              size="sm"
                            >
                              Xem QR
                            </Button>
                            <Button
                              onClick={() => handleCheckStatus(deposit.id)}
                              variant="ghost"
                              size="sm"
                            >
                              Ki·ªÉm tra
                            </Button>
                          </>
                        )}
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </CardContent>
        </Card>

        {/* Instructions */}
        <Card>
          <CardHeader>
            <h3 className="text-lg font-semibold">üìñ H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng</h3>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <h4 className="font-medium text-gray-900 mb-3">üî• N·∫°p ti·ªÅn b·∫±ng QR Code:</h4>
                <ol className="text-sm text-gray-600 space-y-2">
                  <li>1. Nh·∫≠p s·ªë ti·ªÅn mu·ªën n·∫°p</li>
                  <li>2. Nh·∫•n "T·∫°o m√£ QR n·∫°p ti·ªÅn"</li>
                  <li>3. Qu√©t m√£ QR b·∫±ng app ng√¢n h√†ng</li>
                  <li>4. X√°c nh·∫≠n chuy·ªÉn kho·∫£n</li>
                  <li>5. Ti·ªÅn t·ª± ƒë·ªông c·ªông sau 1-2 ph√∫t</li>
                </ol>
              </div>

              <div>
                <h4 className="font-medium text-gray-900 mb-3">üí≥ Chuy·ªÉn kho·∫£n th·ªß c√¥ng:</h4>
                <ol className="text-sm text-gray-600 space-y-2">
                  <li>1. T·∫°o l·ªánh n·∫°p ti·ªÅn</li>
                  <li>2. Copy th√¥ng tin chuy·ªÉn kho·∫£n</li>
                  <li>3. M·ªü app ng√¢n h√†ng</li>
                  <li>4. Chuy·ªÉn kho·∫£n v·ªõi n·ªôi dung ch√≠nh x√°c</li>
                  <li>5. Ch·ªù h·ªá th·ªëng x√°c nh·∫≠n</li>
                </ol>
              </div>
            </div>

            <div className="mt-6 bg-green-50 border border-green-200 p-4 rounded-lg">
              <h4 className="font-medium text-green-800 mb-2">üéØ L∆∞u √Ω quan tr·ªçng:</h4>
              <ul className="text-sm text-green-700 space-y-1">
                <li>‚Ä¢ M·ªói l·ªánh n·∫°p ti·ªÅn c√≥ m√£ tham chi·∫øu ri√™ng bi·ªát</li>
                <li>‚Ä¢ Ph·∫£i chuy·ªÉn kho·∫£n ƒë√∫ng n·ªôi dung ƒë·ªÉ h·ªá th·ªëng nh·∫≠n di·ªán</li>
                <li>‚Ä¢ L·ªánh h·∫øt h·∫°n sau 15 ph√∫t, c·∫ßn t·∫°o l·ªánh m·ªõi n·∫øu qu√° h·∫°n</li>
                <li>‚Ä¢ Gi·ªõi h·∫°n 5 l·ªánh n·∫°p ti·ªÅn trong 1 gi·ªù</li>
              </ul>
            </div>
          </CardContent>
        </Card>
      </div>
    </Layout>
  );
}
